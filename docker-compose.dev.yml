version: '3'
services:
  dev-frontend:
    build:
      context: .
      dockerfile: deploy/docker/dev.frontend.Dockerfile
    ports:
    - "80:3000"
    links:
    - dev-web
    volumes:
    - ./src/mqueryfront/src:/app/src
    depends_on:
      - "dev-web"
  dev-web:
    build:
      context: .
      dockerfile: deploy/docker/dev.web.Dockerfile
    ports:
    - "5000:5000"
    depends_on:
      redis:
        condition: service_started
      postgres:
        condition: service_healthy
    volumes:
    - "${SAMPLES_DIR}:/mnt/samples"
    - .:/usr/src/app
    environment:
      - "REDIS_HOST=redis"
      - "MQUERY_BACKEND=tcp://ursadb:9281"
      - "MQUERY_PLUGINS=${MQUERY_PLUGINS}"
      - "DATABASE_URL=postgresql://postgres:password@postgres:5432/mquery"
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:5000/api/server || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 30
  dev-daemon:
    build:
      context: .
      dockerfile: deploy/docker/dev.daemon.Dockerfile
    links:
    - redis
    - ursadb
    - postgres
    volumes:
    - "${SAMPLES_DIR}:/mnt/samples"
    - .:/usr/src/app
    - "s3:/mnt/s3"
    depends_on:
      dev-web:
        condition: service_healthy
      redis:
        condition: service_started
      ursadb:
        condition: service_started
      postgres:
        condition: service_healthy
    environment:
      - "REDIS_HOST=redis"
      - "MQUERY_BACKEND=tcp://ursadb:9281"
      - "MQUERY_PLUGINS=${MQUERY_PLUGINS}"
      - "DATABASE_URL=postgresql://postgres:password@postgres:5432/mquery"
  ursadb:
    image: mqueryci/ursadb:v1.5.1
    ports:
    - "9281:9281"
    volumes:
    - "${SAMPLES_DIR}:/mnt/samples"
    - "${INDEX_DIR}:/var/lib/ursadb"
    - "s3:/mnt/s3"
    user: "0:0"
  keycloak:
    image: quay.io/keycloak/keycloak:15.1.0
    ports:
    - "8080:8080"
    environment:
    - KEYCLOAK_USER=admin
    - KEYCLOAK_PASSWORD=admin
    - DB_VENDOR=h2
  redis:
    image: redis
  postgres:
    image: postgres
    restart: always
    volumes:
      - ${POSTGRES_DIR}:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=mquery
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
volumes:
  s3:
